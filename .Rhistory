expand_limits_link <- paste0("[", "expand_limits", "](", "#expand_limits", ")")
scale_x_continuous_link <- paste0("[", "scale_x_continuous", "](", "#scale_x_continuous", ")")
cross_df_link <- paste0("[", "cross_df", "](", "#cross_df", ")")
scale_fill_gradient2_link <- paste0("[", "scale_fill_gradient2", "](", "#scale_fill_gradient2", ")")
str_detect_link <- paste0("[", "str_detect", "](", "#str_detect", ")")
Artifact <- c(plot_attrition_link, plot_ggpairs_link, plot_hist_link, plot_cor_link,
plotH2oLeaderboard_link, precisionrecallplot_link, ROCplot_link, ploth2operf_link,
plotlimefeaturetq_link, plotlimefeaturestq_link, confusionMatrixPlot_link, correlationAnalysis_link,
#12
get_cor_link, extract_h2o_model_name_by_position, modelmetrics_fn, calculate_savings_by_thresh_2_link,
# 12 + 4 = 16
paste(Tidy_Eval_link, Tidy_Eval_link2, sep = "\n"), rlang_link, anonymous_link,
fct_recode_link, case_when_link, gather_example_link, fct_reorder2_link,
add_column_link, partial_link, paste(firstMap_link, secondMap_link, sep = "\n"), expand_limits_link,
scale_x_continuous_link, cross_df_link, scale_fill_gradient2_link, str_detect_link)
#16 + 15 = 31
Thumbnail <- c("![](./images/plot_attrition.jpg){width=30%}",
"![](./images/plot_ggpairs.jpg){width=30%}",
"![](./images/plot_hist.jpg){width=30%}",
"![](./images/plot_cor.jpg){width=30%}",
"![](./images/plotH2oLeaderboard.jpg){width=30%}",
"![](./images/precisionrecallplot.jpg){width=30%}",
"![](./images/ROCplot.jpg){width=30%}",
"![](./images/ploth2operf.jpg){width=30%}",
"![](./images/plotLimeExplain.jpg){width=30%}",
"![](./images/plotLimeExplanations.jpg){width=30%}",
"![](./images/confusionMatrixPlot.jpg){width=30%}",
"![](./images/correlationAnalysis.jpg){width=30%}",
#12
"![](./images/get_cor.jpg){width=30%}",
"![](./images/extract_model.jpg){width=30%}",
"![](./images/modelmetrics.jpg){width=30%}",
"![](./images/calculate_savings_by_thresh_2_link.jpg){width=30%}",
#4
"quos, enquo and !!!",
"rlang::sym turns a single character string into an expression.  The expression is typically captured in enquo() or quos() to delay evaluation",
"If you choose not to give the function a name, you get an
[anonymous function](http://adv-r.had.co.nz/Functional-programming.html#anonymous-functions).",
"mutate(OverTime = fct_recode1(OverTime, 'No' = 'Yes')",
"mutate(above_industry_avg = case_when(pct > 0.088 ~ 'Yes', TRUE ~ 'No')",
"Gather takes multiple columns and collapses into key-value pairs",
"fct_reorder() is useful for 1d displays where the factor is mapped to position; fct_reorder2() for 2d displays where the factor is mapped to a non-position aesthetic",
"This is a convenient way to add one or more columns to an existing data frame.",
"partial allows you to preload a function with arguments that do not change. Part of purrr",
"mutate and map are a powerful combination enabling row-wise iteration in a tidy way:
mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl))",
"Change the range of axis values in ggplot:  expand_limits(x = c(-1, 1))",
"scale_x_continuous(label = scales::dollar) ",
"cross_df from `purr` is really helpful.  From a list of variables, it produces all combinations of the list.",
"scale_fill_gradient2 uses 2 gradient transitions by specifying low, mid and high arguments along with a midpoint to specify the middle transition point.  There are variations like scale_fill_gradient that offers only a low and high point. scale_fill_gradient_n allows for any number of gradients.", "filter(str_detect(terms, 'YearsAtCompany'))")
DF_toc <- data.frame(Artifact, Thumbnail)
kable(DF_toc, caption = "") %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F) %>%
group_rows("Visualizations", 1, 12, label_row_css = "background-color: #666; color: #fff;") %>%
group_rows("Functions", 13, 16, label_row_css = "background-color: #666; color: #fff;") %>%
group_rows("Code Snippets", 17, 31, label_row_css = "background-color: #666; color: #fff;")
rm(list = ls(pattern = "_link"))
knitr::include_graphics("./images/CostValueEmployee.JPG")
knitr::include_graphics("./images/CostQuit.JPG")
knitr::include_graphics("./images/NotAllBad.JPG")
knitr::include_graphics("./images/DS_Framework.JPG")
knitr::include_graphics("./images/CRISP-DM.JPG")
knitr::include_graphics("./images/BSPF7Steps.JPG")
knitr::include_graphics("./images/BusAsMachine.JPG")
knitr::include_graphics("./images/BusUnderstanding.JPG")
# By Department
dept_job_role_tbl <- train_raw_tbl %>% select(EmployeeNumber, Department, JobRole, PerformanceRating, Attrition)
dept_job_role_tbl %>% group_by(Department, Attrition) %>%  summarise(n = n()) %>%  ungroup() %>% group_by(Department) %>% mutate(pct = n/sum(n))
dept_job_role_tbl %>% group_by(Department, JobRole, Attrition) %>%  summarise(n = n()) %>% ungroup() %>%
group_by(Department, JobRole) %>% mutate(pct = n/sum(n)) %>% ungroup() %>% filter(Attrition %in% c("Yes"))
# Used Attrition %in% instead of == because the former is more flexible - can add mutiple categories :  c("cat1", "cat2", . . .)
names(train_raw_tbl)
dept_job_role_tbl %>% group_by(Department, JobRole, Attrition) %>%  summarise(n = n()) %>% ungroup() %>% group_by(Department, JobRole) %>%
mutate(pct = n/sum(n)) %>% ungroup() %>% filter(Attrition %in% c("Yes")) %>% arrange(desc(pct)) %>% mutate(above_industry_avg = case_when(pct > 0.088 ~ "Yes", TRUE ~ "No"))
calculate_attrition_cost <-  function(
n = 1,
salary = 80000,
# Direct Results
separation_cost = 500,
vacancy_cost = 10000,
acquisition_cost = 4900,
placement_cost = 3500,
# Productivity Costs
net_revenue_per_employee = 250000,
workdays_per_year = 240,
workdays_position_open = 40,
workdays_onboarding = 60,
onboarding_efficiency = 0.50){
# The code below is the R interpretation of the Excel Spreadsheet
direct_cost <- sum(separation_cost, vacancy_cost, acquisition_cost, placement_cost)
productivy_cost <- net_revenue_per_employee / workdays_per_year *
(workdays_position_open + workdays_onboarding * onboarding_efficiency)
salary_benefit_reduction <- salary / workdays_per_year * workdays_position_open
cost_per_employee <- direct_cost + productivy_cost - salary_benefit_reduction
total_cost <- n * cost_per_employee
return(total_cost)}
dept_job_role_tbl %>% count(JobRole, Attrition) %>% group_by(JobRole) %>% mutate(pct = n/sum(n)) %>% ungroup() %>%
filter(Attrition %in% c("Yes")) %>% arrange(desc(pct)) %>% mutate(above_industry_avg = case_when(pct > 0.088 ~ "Yes", TRUE ~ "No")) %>%
mutate(cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000))
dept_job_role_tbl %>%
group_by(JobRole, Attrition) %>%  summarise(n = n())
dept_job_role_tbl %>% count(JobRole, Attrition)
dept_job_role_tbl %>% count(JobRole, Attrition) %>% group_by(JobRole) %>% mutate(pct = n/sum(n))
count_to_pct <- function(data, ..., col = n){
grouping_vars_expr <- quos(...)
col_expr <- enquo(col)
ret <- data %>% group_by(!!! grouping_vars_expr) %>%
mutate(pct = (!! col_expr)/sum(!! col_expr)) %>% ungroup()
return(ret)
}
dept_job_role_tbl %>% count(Department,JobRole, Attrition) %>% count_to_pct(Department, JobRole)
dept_job_role_tbl %>% count(Department, JobRole, Attrition) %>% count_to_pct(Department, JobRole) %>%
filter(Attrition %in% c("Yes")) %>% arrange(desc(pct)) %>%
mutate(above_industry_avg = case_when(pct > 0.088 ~ "Yes", TRUE ~ "No"))
assess_attrition <- function(data, attrition_col, attrition_value, baseline_pct){
attrition_col_expr <- enquo(attrition_col)
data %>% filter((!! attrition_col_expr) %in% attrition_value) %>% arrange(desc(pct)) %>%
mutate(above_industry_avg = case_when(pct > baseline_pct ~ "Yes", TRUE ~ "No"))}
dept_job_role_tbl %>%
count(Department, JobRole, Attrition) %>% count_to_pct(Department, JobRole) %>%
assess_attrition(Attrition, attrition_value = "Yes", baseline_pct = 0.088) %>% #New code line
mutate(cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000))
knitr::include_graphics("./images/CostAttrition.JPG")
dept_job_role_tbl %>%
count(Department, JobRole, Attrition) %>% count_to_pct(Department, JobRole) %>%
assess_attrition(Attrition, attrition_value = "Yes", baseline_pct = 0.088) %>%
mutate(cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)) %>%
# Data Manipulation
mutate(name = str_c(Department, JobRole, sep = ": ") %>%  as_factor()) %>% #LINE 1
mutate(name = fct_reorder(name, cost_of_attrition)) %>% # LINE 2
mutate(cost_text = str_c("$", format(cost_of_attrition / 1e6, digits = 2), "M", sep = "")) # LINE 3
dept_job_role_tbl %>%
count(Department, JobRole, Attrition) %>% count_to_pct(Department, JobRole) %>%
assess_attrition(Attrition, attrition_value = "Yes", baseline_pct = 0.088) %>%
mutate(cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)) %>%
# Data Manipulation
mutate(name = str_c(Department, JobRole, sep = ": ") %>%  as_factor()) %>% #must be factors to order
mutate(name = fct_reorder(name, cost_of_attrition)) %>% # orders the names by cost
mutate(cost_text = str_c("$", format(cost_of_attrition / 1e6, digits = 2), "M", sep = "")) %>%
# Plotting
ggplot(aes(x = cost_of_attrition, y = name)) +
geom_segment(aes(xend = 0, yend = name), color = palette_light()[[1]]) + # LINE 1
geom_point(aes(size = cost_of_attrition), color = palette_light()[[1]]) + # LINE 2
scale_x_continuous(label = scales::dollar) + # LINE 3
geom_label(aes(label = cost_text, size = cost_of_attrition), hjust = "inward", color = palette_light()[[1]]) + # LINE 4
theme_tq() + scale_size(name = c(4,5)) + # LINE 5
labs(title = "Estimated Cost of Attrition: By Dept and Job Role", y = "", x = "Cost of Attrition") +
theme(legend.position = "none")
dept_job_role_tbl %>%
count(Department, JobRole, Attrition) %>% count_to_pct(Department, JobRole) %>%
assess_attrition(Attrition, attrition_value = "Yes", baseline_pct = 0.088) %>%
mutate(cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)) %>%
###<b>
#Data Manipulation
mutate(name = str_c(Department, JobRole, sep = ": ") %>%  as_factor()) %>%
mutate(name = fct_reorder(name, cost_of_attrition)) %>% # orders the names by cost
mutate(cost_text = str_c("$", format(cost_of_attrition / 1e6, digits = 2), "M", sep = "")) %>%
#Plotting
ggplot(aes(x = cost_of_attrition, y = name)) +
geom_segment(aes(xend = 0, yend = name), color = palette_light()[[1]]) +
geom_point(aes(size = cost_of_attrition), color = palette_light()[[1]]) +
scale_x_continuous(label = scales::dollar) +
geom_label(aes(label = cost_text, size = cost_of_attrition),
hjust = "inward", color = palette_light()[[1]]) +
theme_tq() + scale_size(name = c(4,5)) +
labs(title = "Estimated Cost of Attrition: By Dept and Job Role",
y = "", x = "Cost of Attrition") + theme(legend.position = "none")
###</b>
plot_attrition <- function(data, ..., .value, # ... capture the departments - mutate(name = str_c(Department, JobRole....; .value - cost_of_attrition
fct_reorder = TRUE, # order the function by the .value argument
fct_rev = FALSE, # ascending vs descending y lables
include_lbl = TRUE,
color = palette_light()[[1]],
units = c("0", "K", "M")) {
#sometimes the untis will not be in millions, default is 0 - no units
# Inputs
group_vars_expr <- quos(...) #perhaps department and JobRoles
if(length(group_vars_expr) == 0) # Then just use the first column name - these drive the y labels in the plot so there has to be something!
group_vars_expr <- quos(rlang::sym(colnames(data)[[1]]))
value_expr <- enquo(.value)# for data manipulation (its cost_of_attrition - used in data manipulation and plotting)
value_name <- quo_name(value_expr)# for ggplot - makes a character string in quotes (opposite of rlang::sym()); ggplot is not ready for tidy eval
units_val <- switch(units[[1]], "M" = 1e6, "K" = 1e3, "0" = 1) #work like nested if functions
if (units[[1]] == "0") units <- "" #Make it empty because it would get appended to labels in the plot
# Data Manipulation
#Function factory - a function that produces a function, usd is the function factory - try it usd(1000)
usd <- scales::dollar_format(prefix = "$", largest_with_cents = 1e3)
data_manipulated <- data %>%
mutate(name = str_c(!!! group_vars_expr, sep = ": ") %>% as_factor()) %>%
#Above () removed around !!! group_vars_expr otherwise str_c sees it a single input - it is a psuedo bug in str_c
mutate(value_text = str_c(usd(!! value_expr / units_val), units[[1]], sep = ""))
if(fct_reorder){data_manipulated <- data_manipulated %>%
mutate(name = fct_reorder(name, (!! value_expr))) %>%
arrange(name)} # arrange() is used because fct_reorder() does not actually sort the data, arrange() does the sorting
if(fct_rev){data_manipulated <- data_manipulated %>%
mutate(name = fct_rev(name)) %>%
arrange(name)}
# Visualization
# NOTE:  ggplot does not work with tidyeval framework - requires use of aes_string
g <- data_manipulated %>%
ggplot(aes_string(x = value_name, y = "name")) +
geom_segment(aes(xend = 0, yend = name), color = color) +
geom_point(aes_string(size = value_name), color = color) +
scale_x_continuous(label = scales::dollar) +
theme_tq() +
scale_size(name = c(4,5)) + #c(3,5) should work but I am not satifies with the output.
theme(legend.position = "none")
if(include_lbl){
g <-  g + geom_label(aes_string(label = "value_text", size = value_name), hjust = "inward", color = color)
}
return(g)
}
dept_jobrole_tbl <- train_raw_tbl %>%
select(EmployeeNumber, Department, JobRole, PerformanceRating, Attrition)
kpi_industry_turnover_pct <- 0.088
# Productivity Cost by Role ----
productivity_cost_by_role_tbl <- read_excel("Challenges/productivity_cost_by_role.xlsx")
productivity_cost_by_role_tbl
dept_jobrole_productivty_tbl <- dept_jobrole_tbl %>%
count(Department, JobRole, Attrition) %>%
count_to_pct(Department, JobRole) %>%
left_join(productivity_cost_by_role_tbl, by = c("Department", "JobRole")) %>%
assess_attrition(Attrition,attrition_value = 'Yes',baseline_pct = 0.088) %>%
mutate(attrition_cost = calculate_attrition_cost(n = n, salary = Salary_Average,
net_revenue_per_employee = Revenue_Average))
dept_jobrole_productivty_tbl %>% plot_attrition(Department, JobRole, .value = attrition_cost)
dept_productivty_tbl <- dept_jobrole_tbl %>%
count(Department, JobRole, Attrition) %>%
count_to_pct(Department, JobRole) %>%
assess_attrition(Attrition, "Yes", kpi_industry_turnover_pct) %>%
left_join(productivity_cost_by_role_tbl, by = c("Department", "JobRole")) %>%
group_by(Department) %>%
summarise(n = sum(n),
Salary_Average = sum(Salary_Average), Revenue_Average = sum(Revenue_Average)) %>%
mutate(attrition_cost =
calculate_attrition_cost(n = n, salary = Salary_Average,
net_revenue_per_employee = Revenue_Average))
dept_productivty_tbl %>% plot_attrition(Department, .value = attrition_cost)
knitr::include_graphics("./images/dataunderstanding1.JPG")
skim(train_raw_tbl)
train_raw_tbl %>% select_if(is.character) %>% glimpse()
train_raw_tbl %>% select_if(is.character) %>% map(unique) %>% head()
train_raw_tbl %>% select_if(is.character) %>% map(table) %>% head()
# Anonymous function with ~
train_raw_tbl %>% select_if(is.character) %>% map(~ table(.) %>% prop.table())
train_raw_tbl %>% select_if(is.numeric) %>% map_df(~ unique(.) %>% length())
train_raw_tbl %>% select_if(is.numeric) %>% map_df(~ unique(.) %>% length()) %>%
gather() %>% arrange(value) %>% filter(value <= 10) # features with more than 10 might be nonessential or categorical
train_raw_tbl %>% select_if(is.numeric) %>% map_df(~ unique(.) %>% length()) %>%
gather() %>% arrange(value) %>% filter(value > 10) # features with more than 10 might be nonessential or categorical
train_raw_tbl %>% select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome)
train_raw_tbl %>% select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %>% ggpairs()
train_raw_tbl %>% select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %>%
ggpairs(aes(color = Attrition), lower = "blank", legend = 1, diag = list(continuous = wrap("densityDiag", alpha = 0.5))) +
theme(legend.position = "bottom")
#ggsave("./images/plot_ggpairs.jpg")
plot_ggpairs <- function(data, color = NULL, density_alpha = 0.5){
color_expr <- enquo(color)
if(rlang::quo_is_null(color_expr)){gdata %>% ggpairs(lowe = "blank")
} else {
color_name <- quo_name(color_expr)
g <- data %>%
ggpairs(mapping = aes_string(color = color_name),
lower = "blank", legend = 1, diag = list(continuous = wrap("densityDiag",
alpha = density_alpha))) + theme(legend.position = "bottom")}
return(g)}
train_raw_tbl  %>% select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %>% plot_ggpairs(Attrition)
train_raw_tbl %>% select(Attrition, contains("employee"), contains("department"), contains("job")) %>% plot_ggpairs(Attrition)
train_raw_tbl %>% select(Attrition, contains("income"), contains("rate"), contains("salary"),
contains("stock")) %>% plot_ggpairs(Attrition)
train_raw_tbl %>% select(Attrition, contains("satisfaction"), contains("life")) %>% plot_ggpairs(Attrition)
train_raw_tbl %>% select(Attrition, contains("performance"), contains("involvement")) %>% plot_ggpairs(Attrition)
train_raw_tbl %>% select(Attrition, contains("overtime"), contains("travel")) %>% plot_ggpairs(Attrition)
train_raw_tbl %>% select(Attrition, contains("training"), contains("education")) %>% plot_ggpairs(Attrition)
train_raw_tbl %>% select(Attrition, contains("years")) %>% plot_ggpairs(Attrition)
train_raw_tbl %>% ggplot(aes(Education)) + geom_bar()
path_data_definitions <- "00_Data/telco_data_definitions.xlsx"
definitions_raw_tbl <- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)
definitions_raw_tbl
definitions_tbl <- definitions_raw_tbl %>% fill(X__1, .direction = "down") %>% filter(!is.na(X__2)) %>%
separate(X__2, into = c("key", "value"), sep = " '", remove = TRUE) %>%
rename(column_name = X__1) %>% mutate(key = as.numeric(key)) %>%
mutate(value = value %>% str_replace(pattern = "'", replacement = ""))
definitions_tbl
definitions_list <- definitions_tbl %>%
split(.$column_name) %>% #split df into multiple dfs within a list
map(~ select(., -column_name)) %>% # remove column_name col leaving key and value
map(~ mutate(., value = as_factor(value)))# Creates factors in the order they appear - not alphabetically like as.factor
definitions_list[[3]]
for(i in seq_along(definitions_list)){
list_name <- names(definitions_list)[i]
colnames(definitions_list[[i]]) <- c(list_name, paste0(list_name, "_value"))}
definitions_list[[3]]
data_merged_tbl <- list(HRData = train_raw_tbl) %>% append(definitions_list, after = 1) %>%
reduce(left_join) %>%
select(-one_of(names(definitions_list))) %>%
set_names(str_replace_all(names(.), pattern = "_value", replacement = "")) %>%
select(sort(names(.)))
glimpse(data_merged_tbl)
data_merged_tbl %>% select_if(is.character) %>% glimpse()
data_merged_tbl %>% distinct(BusinessTravel)
# Reorder some factors
data_merged_tbl %>% mutate_if(is.character, as.factor) %>%  select_if(is.factor) %>% map(levels) %>% head()
data_processed_tbl <- data_merged_tbl %>% mutate_if(is.character, as.factor) %>%
mutate(BusinessTravel = BusinessTravel %>% fct_relevel("Non-Travel", "Travel_Rarely", "Travel_Frequently"),
MaritalStatus = MaritalStatus %>% fct_relevel("Single", "Married", "Divorced"))
data_processed_tbl %>% select(BusinessTravel, MaritalStatus) %>% map(levels)
process_hr_data_readable <- function(data, definitions_tbl){
definitions_list <- definitions_tbl %>% fill(X__1, .direction = "down") %>%
filter(!is.na(X__2)) %>%
separate(X__2, into = c("key", "value"), sep =  " '", remove = TRUE) %>%
rename(column_name = X__1) %>%
mutate(key = as.numeric(key)) %>%
mutate(value = value %>% str_replace(pattern = "'", replacement = "")) %>%
split(.$column_name) %>%
map(~ select(., -column_name)) %>%
map(~ mutate(., value = as_factor(value)))
for(i in seq_along(definitions_list)){
list_name <- names(definitions_list)[i]
colnames(definitions_list[[i]]) <- c(list_name, paste0(list_name, "_value")) }
data_merged_tbl <- list(HRData = data) %>% append(definitions_list, after = 1) %>%
reduce(left_join) %>%
select(-one_of(names(definitions_list))) %>%
set_names(str_replace_all(names(.), pattern = "_value", replacement = "")) %>%
select(sort(names(.))) %>%
mutate_if(is.character, as.factor) %>%
mutate(BusinessTravel = BusinessTravel %>% fct_relevel("Non-Travel", "Travel_Rarely", "Travel_Frequently"),
MaritalStatus = MaritalStatus %>% fct_relevel("Single", "Married", "Divorced"))
return(data_merged_tbl)
}
rm(list = ls())
if(!require(easypackages)){install.packages("easypackages")}
library(easypackages)
pkgs <- c("tidyverse", "tidyquant", "stringr", "forcats", "readxl")
packages(pkgs, prompt = FALSE)
# Load Data
path_train <- "00_Data/telco_train.xlsx"
path_test <- "00_Data/telco_test.xlsx"
path_data_definitions <- "00_Data/telco_data_definitions.xlsx"
train_raw_tbl <- read_excel(path_train, sheet = 1)
test_raw_tbl <- read_excel(path_test, sheet = 1)
definitions_raw_tbl <- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)
# Processing Pipeline
source("00_Scripts/data_processing_pipeline.R")
train_readable_tbl <- process_hr_data_readable(train_raw_tbl, definitions_raw_tbl)
test_readable_tbl <- process_hr_data_readable(test_raw_tbl, definitions_raw_tbl)
# Plot Faceted Histogram Function ----
plot_hist_facet <- function(data, bins = 10, ncol = 5, fct_reorder = FALSE, fct_rev = FALSE,
fill = palette()[[3]], color = "white", scale = "free"){
data_factored <- data %>% mutate_if(is.character, as.factor) %>% mutate_if(is.factor, as.numeric) %>%
gather(key = key, value = value, factor_key = TRUE)
if(fct_reorder){data_factored <- data_factored %>% mutate(key = as.character(key) %>% as.factor())}
if(fct_rev){data_factored <- data_factored %>% mutate(key = fct_rev(key))}
g <- data_factored %>% ggplot(aes(x = value, group = key)) + geom_histogram(bins = bins,
fill = fill, color = color) + facet_wrap(~ key, ncol = ncol, scale = scale) + theme_tq()
return(g)}
train_raw_tbl %>% select(Attrition, everything()) %>% plot_hist_facet(bins = 10, ncol =5, fct_rev = F)
#ggsave("./images/plot_hist.jpg")
knitr::include_graphics("./images/recipes1.JPG")
knitr::include_graphics("./images/recipes2.JPG")
knitr::include_graphics("./images/recipes3.JPG")
recipe_obj <- recipe(Attrition ~., data = train_readable_tbl)
recipe_obj
recipe_obj %>% step_zv(all_predictors())
recipe_obj %>% step_zv(all_predictors()) %>% prep()
train_readable_tbl %>% select_if(is.numeric) %>% map_df(skewness) %>% gather(factor_key = TRUE) %>% arrange(desc(value))
# NOTE:  high value --> fat tail on left, very low --> fat tail on right
skewed_feature_names <- train_readable_tbl %>% select_if(is.numeric) %>% map_df(skewness) %>%
gather(factor_key = TRUE) %>% arrange(desc(value)) %>% filter(value >= 0.8) %>%
pull(key) %>% as.character()
skewed_feature_names
train_readable_tbl %>% select(skewed_feature_names) %>% plot_hist_facet()
factor_names <- c("JobLevel", "StockOptionLevel")
skewed_feature_names <- train_readable_tbl %>% select_if(is.numeric) %>% map_df(skewness) %>%
gather(factor_key = TRUE) %>% arrange(desc(value)) %>% filter(value >= 0.8) %>%
filter(!key %in% factor_names) %>% pull(key) %>% as.character()
recipe_obj <- recipe(Attrition ~., data = train_readable_tbl) %>% step_zv(all_predictors()) %>%
step_YeoJohnson(skewed_feature_names) %>%
step_num2factor(factor_names)
recipe_obj %>% prep()
recipe_obj %>% prep() %>% bake(train_readable_tbl) %>% select(skewed_feature_names) %>% plot_hist_facet()
train_readable_tbl %>% select_if(is.numeric) %>% plot_hist_facet()
recipe_obj <- recipe(Attrition ~., data = train_readable_tbl) %>% step_zv(all_predictors()) %>%
step_YeoJohnson(skewed_feature_names) %>% step_num2factor(factor_names) %>%
step_center(all_numeric()) %>%
step_scale(all_numeric())
recipe_obj
recipe_obj %>% prep()#Note:  recipe output is a list
recipe_obj %>% prep() %>% bake(newdata = train_readable_tbl) %>% select_if(is.numeric) %>% plot_hist_facet()
dummied_recipe_obj <- recipe(Attrition ~., data = train_readable_tbl) %>% step_zv(all_predictors()) %>% step_YeoJohnson(skewed_feature_names) %>%
step_num2factor(factor_names) %>% step_center(all_numeric()) %>% step_scale(all_numeric()) %>%
step_dummy(all_nominal()) %>% prep() %>% bake(newdata = train_readable_tbl) %>% select(contains("JobRole")) %>% plot_hist_facet(ncol = 3)
recipe_obj <- recipe(Attrition ~., data = train_readable_tbl) %>% step_zv(all_predictors()) %>% step_YeoJohnson(skewed_feature_names) %>%
step_num2factor(factor_names) %>% step_center(all_numeric()) %>% step_scale(all_numeric()) %>%
step_dummy(all_nominal())
recipe_obj <- recipe_obj %>% prep()
recipe_obj
train_tbl <- bake(recipe_obj, newdata = train_readable_tbl)
test_tbl <- bake(recipe_obj, newdata = test_readable_tbl)
class(train_tbl$Attrition_Yes)
get_cor <- function(data, target, use = "pairwise.complete.obs", fct_reorder = FALSE, fct_rev = FALSE){
feature_expr <- enquo(target)
feature_name <- quo_name(feature_expr)
data_cor <- data %>% mutate_if(is.character, as.factor) %>% mutate_if(is.factor, as.numeric) %>%
cor(use = use) %>% as.tibble() %>% mutate(feature = names(.)) %>%
select(feature, !! feature_expr) %>% filter(!(feature == feature_name)) %>%
mutate_if(is.character, as_factor)
if(fct_reorder){data_cor <- data_cor %>% mutate(feature = fct_reorder(feature,
!! feature_expr)) %>% arrange(feature)}
if(fct_rev){data_cor <- data_cor %>% mutate(feature = fct_rev(feature)) %>% arrange(feature)}
return(data_cor)}
train_tbl %>% get_cor(Attrition_Yes, fct_reorder = T, fct_rev = T)
plot_cor <- function(data, target, fct_reorder = FALSE, fct_rev = FALSE, include_lbl = TRUE, lbl_precision = 2, lbl_position = "outward",
size = 2, line_size = 1, vert_size = 1, color_pos = palette_light()[[1]], color_neg = palette_light()[[2]]) {
feature_expr <- enquo(target)
feature_name <- quo_name(feature_expr)
data_cor <- data %>%
get_cor(!! feature_expr, fct_reorder = fct_reorder, fct_rev = fct_rev) %>%
mutate(feature_name_text = round(!! feature_expr, lbl_precision)) %>%
mutate(Correlation = case_when((!! feature_expr) >= 0 ~ "Positive", TRUE ~ "Negative") %>% as.factor())
g <- data_cor %>% ggplot(aes_string(x = feature_name, y = "feature", group = "feature")) +
geom_point(aes(color = Correlation), size = size) +
geom_segment(aes(xend = 0, yend = feature, color = Correlation), size = line_size) +
geom_vline(xintercept = 0, color = palette_light()[[1]], size = vert_size) +
expand_limits(x = c(-1, 1)) + theme_tq() + scale_color_manual(values = c(color_neg, color_pos))
if (include_lbl) g <- g + geom_label(aes(label = feature_name_text), hjust = lbl_position)
return(g)}
train_tbl %>% plot_cor(target = Attrition_Yes, fct_reorder = T, fct_rev = F)
#ggsave("./images/plot_cor.jpg")
train_tbl %>% select(Attrition_Yes, Age, contains("Gender"), contains("MaritalStatus"), NumCompaniesWorked, contains("Over18"), DistanceFromHome) %>%
plot_cor(target = Attrition_Yes, fct_reorder = T, fct_rev = F)
train_tbl %>% select(Attrition_Yes, contains("employee"), contains("department"), contains("job")) %>%
plot_cor(target = Attrition_Yes, fct_reorder = T, fct_rev = F)
# contains is NOT case sentitive
train_tbl %>% select(Attrition_Yes, contains("income"), contains("rate"), contains("salary"),
contains("stock")) %>%
plot_cor(target = Attrition_Yes, fct_reorder = T, fct_rev = F)
train_tbl %>% select(Attrition_Yes, contains("satisfaction"), contains("life")) %>%
plot_cor(target = Attrition_Yes, fct_reorder = T, fct_rev = F)
train_tbl %>% select(Attrition_Yes, contains("performance"), contains("involvement")) %>%
plot_cor(target = Attrition_Yes, fct_reorder = T, fct_rev = F)
train_tbl %>% select(Attrition_Yes, contains("overtime"), contains("travel")) %>%
plot_cor(target = Attrition_Yes, fct_reorder = T, fct_rev = F)
train_tbl %>% select(Attrition_Yes, contains("training"), contains("education")) %>%
plot_cor(target = Attrition_Yes, fct_reorder = T, fct_rev = F)
train_tbl %>% select(Attrition_Yes, contains("years")) %>% plot_cor(target = Attrition_Yes,
fct_reorder = T, fct_rev = F)
rm(list = ls())
setwd("~/GitHub/CourseWork/BusSciUniv/EeeAttrition")
packages <- c("h2o", "recipes", "readxl", "tidyverse", "tidyquant", "stringr", "forcats", "cowplot", "fs", "glue")
if(!require(easypackages)){install.packages("easypackages")}
library(easypackages)
packages(packages, prompt = FALSE)
# Load Data
path_train            <- "00_Data/telco_train.xlsx"
path_test             <- "00_Data/telco_test.xlsx"
path_data_definitions <- "00_Data/telco_data_definitions.xlsx"
train_raw_tbl       <- read_excel(path_train, sheet = 1)
test_raw_tbl        <- read_excel(path_test, sheet = 1)
definitions_raw_tbl <- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)
# Processing Pipeline
source("00_Scripts/data_processing_pipeline.R")
train_readable_tbl <- process_hr_data_readable(train_raw_tbl, definitions_raw_tbl)
test_readable_tbl  <- process_hr_data_readable(test_raw_tbl, definitions_raw_tbl)
# ML Preprocessing
recipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>% step_zv(all_predictors()) %>% step_num2factor(JobLevel, StockOptionLevel) %>%
prep()
train_tbl <- bake(recipe_obj, newdata = train_readable_tbl)
test_tbl  <- bake(recipe_obj, newdata = test_readable_tbl)
knitr::include_graphics("./images/BSPFEncode1.JPG")
h2o.init()
split_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)
train_h2o <- split_h2o[[1]]; valid_h2o <- split_h2o[[2]]
test_h2o  <- as.h2o(test_tbl)
automl_models_h2o <- h2o.automl(x = x, y = y, training_frame = train_h2o, validation_frame = valid_h2o,
leaderboard_frame = NULL, max_runtime_secs = 30, nfolds = 5)
h2o.init()
h2o.no_progress()
split_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)
train_h2o <- split_h2o[[1]]; valid_h2o <- split_h2o[[2]]
test_h2o  <- as.h2o(test_tbl)
y <- "Attrition"; x <- setdiff(names(train_h2o), y)
automl_models_h2o <- h2o.automl(x = x, y = y, training_frame = train_h2o, validation_frame = valid_h2o,
leaderboard_frame = NULL, max_runtime_secs = 30, nfolds = 5)
automl_models_h2o@leader
automl_models_h2o@leaderboard
automl_models_h2o@leader
h2o.getModel("GLM_grid_0_AutoML_20181028_112225_model_0") %>%
h2o.saveModel(path = "04_Modeling/h2o_models/")
h2o.getModel("StackedEnsemble_BestOfFamily_0_AutoML_20181028_112225") %>%
h2o.saveModel(path = "04_Modeling/h2o_models/")
stacked_ensemble_h2o <- h2o.loadModel("04_Modeling/h2o_models/GLM_grid_0_AutoML_20181028_112225_model_0")
predictions <- h2o.predict(stacked_ensemble_h2o, newdata = as.h2o(test_tbl))
predictions_tbl <- predictions %>% as.tibble()
predictions_tbl %>% head()
setwd("~/GitHub/Microsoft")
if(!require(easypackages)){install.packages("easypackages")}
library(easypackages)
packages("plyr", "dplyr", "tidyr","tibble", "ggplot2", "tictoc", "AzureML", prompt = TRUE)
ws <- workspace()
head(ws$datasets)
ws <- workspace(id = "9e8fd908da754c52a531dd572d6176dd",
auth = "JBx52ewvpIyTedfFDKZJCVYHBCHqiMU+94Zb+qqF/7SCR2vRezyOriO0J84jzLbwHy+BjMNFM2w0h2sb3aDwaA==")
head(ws$datasets)
airports <- download.datasets(ws, name = "Airport Codes Dataset", quote="\"")
head(airports)
upload.dataset(airquality, ws, name = "Air quality")
head(download.datasets(ws, name = "Air quality"))
delete.datasets(ws, name="Air quality")
add <- function(x, y) {x + y}
api <- publishWebService(ws, fun = add, name = "AzureML-duh", inputSchema = list(x = "numeric", y = "numeric"),
outputSchema = list(ans = "numeric"))
deleteWebService(ws, name = "AzureML-duh")
setwd("~/GitHub/Statistics")
